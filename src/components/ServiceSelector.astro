---

const questions = [
	{
		id: 'proposito',
		question: '¿Cuál es el principal objetivo de tu sitio web?',
		options: [
			{ value: 'Sitio Web Corporativo / Informativo', label: 'Sitio Web Corporativo / Informativo', description: 'Ideal para empresas, marcas personales y organizaciones.' },
			{ value: 'Tienda Online (E-commerce)', label: 'Tienda Online (E-commerce)', description: 'Para vender productos o servicios en línea.' },
			{ value: 'Landing Page (Página de Captación de Leads)', label: 'Landing Page (Página de Captación de Leads)', description: 'Ideal para campañas de marketing y promociones.' },
			{ value: 'Plataforma de Reservas o Servicios', label: 'Plataforma de Reservas o Servicios', description: 'Para clínicas, gimnasios, consultorías, restaurantes, etc.' }
		]
	},
	{
		id: 'identidad',
		question: '¿Tienes algún diseño o identidad visual definida?',
		options: [
			{ value: 'Sí, tengo un diseño listo', label: '"Sí, tengo un diseño listo', description: 'Ya cuentas con un diseño definido y solo necesitas que lo llevemos a la web, manteniendo su estructura y estilo original.' },
			{ value: 'Tengo ideas, pero necesito ayuda con el diseño"', label: 'Tengo ideas, pero necesito ayuda con el diseño"', description: 'Tienes una visión clara de tu sitio web y algunos referentes visuales de lo que te gusta, pero necesitas apoyo para darle forma y adaptar el diseño a tu marca y objetivos.' },
			{ value: 'No tengo nada aún, necesito un diseño desde cero', label: 'No tengo nada aún, necesito un diseño desde cero', description: 'Partimos desde cero para crear un sitio web único, definiendo tanto la identidad visual como la estructura y funcionalidad según tus necesidades. ¡Te guiamos en todo el proceso!.' }
		]
	},
	{
		id: 'soporte',
		question: '¿Necesitas soporte o mantenimiento después del lanzamiento?',
		multiple: true,
		options: [
			{ value: 'Sí, quiero actualizaciones y soporte técnico', label: 'Sí, quiero actualizaciones y soporte técnico', description: 'Nosotros estaremos atento a tu sitio web.' },
			{ value: 'Sí, pero solo necesito capacitación para administrarlo', label: 'Sí, pero solo necesito capacitación para administrarlo', description: 'Le enseñamos a administrar su sitio web.' },
			{ value: 'No, solo quiero el sitio funcionando y listo para usar', label: 'No, solo quiero el sitio funcionando y listo para usar', description: 'Usted será responsable de la administración y seguridad de su sitio web.' },
		]
	},
	{
		id: 'tiempo',
		question: '¿Cuál es tu tiempo ideal de implementación?',
		options: [
			{ value: 'Express (2-3 semanas)', label: 'Express (2-3 semanas)', description: 'Ideal si necesitas tu sitio web con urgencia y estás dispuesto a agilizar el proceso de revisiones y entregas.' },
			{ value: 'Estándar (4-6 semanas)', label: 'Estándar (4-6 semanas)', description: 'Un desarrollo equilibrado que permite tiempo para ajustes y mejoras sin apuros.' },
			{ value: 'Detallado (8-10 semanas o más)', label: 'Detallado (8-10 semanas o más)', description: 'Perfecto para proyectos más complejos que requieren personalización, revisiones detalladas y funcionalidades avanzadas.' }
		]
	},

];
---

<section class="service-selector bg-box container rounded-md mx-auto py-10 px-10">
	<h2 class="text-3xl text-white sm:text-4xl md:text-6xl">Descubre tu solución ideal</h2>
	<p class="text-center text-xl">Responde algunas preguntas para ayudarnos a entender mejor tu proyecto</p>
	<div class="questions-container" id="cotizar">
		{questions.map((q, index) => (
			<div class="question-step" id={`question-${q.id}`} data-step={index + 1}>
				<div class="progress-bar">
					<div class="progress" style={`width: ${((index + 1) / questions.length) * 100}%`}></div>
				</div>
				
				<h3>{q.question}</h3>
				
				<div class="options-grid">
					{q.options.map(option => (
						<label class="option-card">
							<input 
								type={q.multiple ? "checkbox" : "radio"} 
								name={q.id} 
								value={option.value}
							/>
							<div class="option-content">
								<span class="text-teal-300 text-xl">{option.label}</span>
								<p>{option.description}</p>
							</div>
						</label>
					))}
				</div>
			</div>
		))}

		<div class="question-step" id="contact-form" data-step={questions.length + 1}>
			<div class="progress-bar">
				<div class="progress" style="width: 100%"></div>
			</div>
			
			<h3>Datos de contacto</h3>
			<form class="contact-form">
				<div class="form-grid">
					<div class="form-group">
						<label for="name">Nombre Completo</label>
						<input type="text" id="name" required />
					</div>
					<div class="form-group">
						<label for="email">Email</label>
						<input type="email" id="email" required />
					</div>
					<div class="form-group">
						<label for="phone">Teléfono</label>
						<input type="tel" id="phone" />
					</div>
					<div class="form-group">
						<label for="company">Empresa</label>
						<input type="text" id="company" />
					</div>
				</div>
				<div class="form-group full-width">
					<label for="message">Comentarios adicionales</label>
					<textarea id="message" rows="4"></textarea>
				</div>
			</form>
		</div>
	</div>

	<div class="navigation-buttons">
		<button class="back-btn" id="backBtn">Anterior</button>
		<button class="continue-btn" id="nextBtn">Continuar</button>
	</div>
</section>

<style>
	h2 {
		font-size: 2.5rem;
		margin-bottom: 1rem;
		text-align: center;
	}

	.questions-container {
		margin: 3rem auto;
	}

	.question-step {
		display: none;
		animation: fadeIn 0.3s ease;
	}

	.question-step.active {
		display: block;
	}

	.progress-bar {
		height: 4px;
		background: rgba(255, 255, 255, 0.1);
		margin-bottom: 2rem;
		border-radius: 2px;
	}

	.progress {
		height: 100%;
		background: var(--accent);
		border-radius: 2px;
		transition: width 0.3s ease;
	}

	h3 {
		font-size: 1.5rem;
		margin-bottom: 2rem;
		text-align: center;
	}

	.options-grid {
		display: grid;
		gap: 1rem;
		margin: 2rem 0;
	}

	.option-card {
		position: relative;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 0.5rem;
		padding: 1.5rem;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.option-card:hover {
		background: rgba(255, 255, 255, 0.1);
	}

	.option-card input {
		position: absolute;
		opacity: 0;
	}

	.option-card input:checked + .option-content {
		border: 2px solid var(--accent);
		background: rgba(76, 214, 192, 0.1);
	}

	.option-content {
		border: 2px solid transparent;
		border-radius: 0.4rem;
		padding: 1rem;
	}

	.option-content h4 {
		margin: 0 0 0.5rem 0;
		font-size: 1.1rem;
	}

	.option-content p {
		margin: 0;
		font-size: 0.9rem;
		opacity: 0.8;
	}

	.form-grid {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.form-group {
		text-align: left;
	}

	.form-group.full-width {
		grid-column: 1 / -1;
	}

	label {
		display: block;
		margin-bottom: 0.5rem;
		font-size: 0.9rem;
	}

	input, textarea {
		width: 100%;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 0.25rem;
		padding: 0.8rem;
		color: var(--text-light);
	}

	.navigation-buttons {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-top: 2rem;
	}

	.back-btn, .continue-btn {
		padding: 0.8rem 2rem;
		border-radius: 0.25rem;
		font-weight: 600;
		cursor: pointer;
		transition: opacity 0.3s ease;
	}

	.back-btn {
		background: transparent;
		border: 1px solid var(--accent);
		color: var(--accent);
	}

	.continue-btn {
		background: var(--accent);
		color: var(--bg-dark);
		border: none;
	}

	.back-btn:hover, .continue-btn:hover {
		opacity: 0.9;
	}

	@keyframes fadeIn {
		from { opacity: 0; transform: translateY(10px); }
		to { opacity: 1; transform: translateY(0); }
	}

	@media (max-width: 768px) {
		.form-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
	import confetti from 'canvas-confetti';

	let count = 200;
	let defaults = {
	origin: { y: 0.7 }
	};

	function fire(particleRatio:any, opts:any) {
	confetti({
		...defaults,
		...opts,
		particleCount: Math.floor(count * particleRatio)
	});
	}

	

	document.addEventListener('DOMContentLoaded', () => {

		const backBtn = document.querySelector('#backBtn');
		const nextBtn = document.querySelector('#nextBtn');

		let currentStep = 1;
		const totalSteps = document.querySelectorAll('.question-step').length;
		const answers = {
			name: '',
			email: '',
			phone: '',
			company: '',
			message: ''
		};

		function updateStep() {
			document.querySelectorAll('.question-step').forEach(step => step.classList.remove('active'));
			const currentStepElement = document.querySelector(`[data-step="${currentStep}"]`);
			if (currentStepElement) {
				currentStepElement.classList.add('active');
			}

			if (backBtn) (backBtn as HTMLElement).style.display = currentStep === 1 ? 'none' : 'block';
			if (nextBtn) nextBtn.textContent = currentStep === totalSteps ? 'Enviar' : 'Continuar';
		}

		function validateStep() {
			const currentQuestion = document.querySelector(`[data-step="${currentStep}"]`);
			if (!currentQuestion) return false;

			// Validar preguntas de selección
			const selectedInputs = currentQuestion.querySelectorAll("input:checked, input[type='radio']:checked");
			if (currentStep < totalSteps) return selectedInputs.length > 0;

			// Validar formulario de contacto
			const requiredInputs = currentQuestion.querySelectorAll('input[required]');
			return Array.from(requiredInputs).every(input => (input as HTMLInputElement).value.trim() !== '');
		}

		function collectAnswers() {
			document.querySelectorAll(".question-step").forEach((step) => {
				const questionId = step.getAttribute("id")?.replace("question-", "");
				if (questionId && questionId !== "contact-form") {
					const selectedInputs = step.querySelectorAll("input:checked, input[type='radio']:checked");
					answers[questionId as keyof typeof answers] = selectedInputs.length > 0
						? Array.from(selectedInputs).map(input => (input as HTMLInputElement).value).join(', ')
						: '';
				}
			});

			// Capturar información del formulario de contacto
			['name', 'email', 'phone', 'company', 'message'].forEach(id => {
				const input = document.querySelector(`#${id}`) as HTMLInputElement;
				if (input) answers[id as keyof typeof answers] = input.value.trim();
			});
		}

       // reiniciar el formulario despues del envio 
	   function resetForm() {
            // Reiniciar el objeto answers
			Object.keys(answers).forEach(key => {
				answers[key as keyof typeof answers] = '';
			});

            // Reiniciar los campos del formulario
            document.querySelectorAll('.question-step input, .question-step textarea').forEach(input => {
                (input as HTMLInputElement).value = '';
                (input as HTMLInputElement).checked = false;
            });

            // Reiniciar el paso actual
            currentStep = 1;
            updateStep();
        }



		backBtn?.addEventListener('click', () => {
			if (currentStep > 1) {
				currentStep--;
				updateStep();
			}
		});

		nextBtn?.addEventListener('click', async () => {
			if (!validateStep()) {
				alert("Por favor, completa este paso antes de continuar.");
				return;
			}

			if (currentStep < totalSteps) {
				currentStep++;
				updateStep();
			} else {
				collectAnswers();

				// Validación final antes de enviar
				if (!answers.email || !answers.name) {
					alert("Por favor, completa tu nombre y correo electrónico.");
					return;
				}

				try {
					const response = await fetch("/api/send-email", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(answers),
					});

					const result = await response.json();
					if (result.success) {
						fire(0.25, {
						spread: 26,
						startVelocity: 55,
						});
						fire(0.2, {
						spread: 60,
						});
						fire(0.35, {
						spread: 100,
						decay: 0.91,
						scalar: 0.8
						});
						fire(0.1, {
						spread: 120,
						startVelocity: 25,
						decay: 0.92,
						scalar: 1.2
						});
						fire(0.1, {
						spread: 120,
						startVelocity: 45,
						});
						resetForm();
						console.log("Correo enviado con éxito. ¡Gracias por tu información!");
					} else {
						console.log("Hubo un error al enviar el correo.");
					}
				} catch (error) {
					console.error("Error al enviar el correo:", error);
					console.log("No se pudo enviar el correo.");
				}
			}
		});

		// Inicializar el formulario
		updateStep();
	});
</script>
