---
const questions = [
	{
		id: 'purpose',
		question: '¿Cuál es el principal objetivo de tu sitio web?',
		options: [
			{ value: 'showcase', label: 'Mostrar información de mi empresa/marca', description: 'Ideal para presentar tu empresa y servicios' },
			{ value: 'sell', label: 'Vender productos online', description: 'Para crear una tienda virtual completa' },
			{ value: 'generate_leads', label: 'Generar leads/contactos', description: 'Enfocado en captar potenciales clientes' },
			{ value: 'pos', label: 'Gestionar mi negocio', description: 'Sistema de punto de venta y gestión' }
		]
	},
	{
		id: 'size',
		question: '¿Qué cantidad de contenido planeas tener?',
		options: [
			{ value: 'small', label: '1-5 páginas', description: 'Sitio web pequeño y conciso' },
			{ value: 'medium', label: '6-15 páginas', description: 'Sitio web mediano con secciones detalladas' },
			{ value: 'large', label: 'Más de 15 páginas', description: 'Sitio web grande con mucho contenido' }
		]
	},
	{
		id: 'features',
		question: '¿Qué funcionalidades necesitas?',
		multiple: true,
		options: [
			{ value: 'blog', label: 'Blog', description: 'Para publicar contenido regularmente' },
			{ value: 'forms', label: 'Formularios personalizados', description: 'Para captar información de usuarios' },
			{ value: 'users', label: 'Área de usuarios', description: 'Para contenido exclusivo' },
			{ value: 'payments', label: 'Pagos online', description: 'Para ventas o suscripciones' },
			{ value: 'multilang', label: 'Multi-idioma', description: 'Contenido en varios idiomas' }
		]
	},
	{
		id: 'timeline',
		question: '¿Cuál es tu tiempo ideal de implementación?',
		options: [
			{ value: 'urgent', label: '2-3 semanas', description: 'Implementación express' },
			{ value: 'normal', label: '4-6 semanas', description: 'Tiempo estándar' },
			{ value: 'relaxed', label: '8+ semanas', description: 'Desarrollo detallado' }
		]
	},
	{
		id: 'budget',
		question: '¿Cuál es tu presupuesto aproximado?',
		options: [
			{ value: 'basic', label: '$500.000 - $1.000.000', description: 'Proyecto básico' },
			{ value: 'standard', label: '$1.000.000 - $2.500.000', description: 'Proyecto estándar' },
			{ value: 'premium', label: '$2.500.000+', description: 'Proyecto premium' }
		]
	}
];
---

<section class="service-selector" id="cotizar">
	<h2>Descubre tu solución ideal</h2>
	<p>Responde algunas preguntas para ayudarnos a entender mejor tu proyecto</p>

	<div class="questions-container">
		{questions.map((q, index) => (
			<div class="question-step" id={`question-${q.id}`} data-step={index + 1}>
				<div class="progress-bar">
					<div class="progress" style={`width: ${((index + 1) / questions.length) * 100}%`}></div>
				</div>
				
				<h3>{q.question}</h3>
				
				<div class="options-grid">
					{q.options.map(option => (
						<label class="option-card">
							<input 
								type={q.multiple ? "checkbox" : "radio"} 
								name={q.id} 
								value={option.value}
							/>
							<div class="option-content">
								<h4>{option.label}</h4>
								<p>{option.description}</p>
							</div>
						</label>
					))}
				</div>
			</div>
		))}

		<div class="question-step" id="contact-form" data-step={questions.length + 1}>
			<div class="progress-bar">
				<div class="progress" style="width: 100%"></div>
			</div>
			
			<h3>Datos de contacto</h3>
			<form class="contact-form">
				<div class="form-grid">
					<div class="form-group">
						<label for="name">Nombre Completo</label>
						<input type="text" id="name" required />
					</div>
					<div class="form-group">
						<label for="email">Email</label>
						<input type="email" id="email" required />
					</div>
					<div class="form-group">
						<label for="phone">Teléfono</label>
						<input type="tel" id="phone" />
					</div>
					<div class="form-group">
						<label for="company">Empresa</label>
						<input type="text" id="company" />
					</div>
				</div>
				<div class="form-group full-width">
					<label for="message">Comentarios adicionales</label>
					<textarea id="message" rows="4"></textarea>
				</div>
			</form>
		</div>
	</div>

	<div class="navigation-buttons">
		<button class="back-btn" id="backBtn">Anterior</button>
		<button class="continue-btn" id="nextBtn">Continuar</button>
	</div>
</section>

<style>
	.service-selector {
		padding: 4rem 1rem;
		max-width: 800px;
		margin: 0 auto;
	}

	h2 {
		font-size: 2.5rem;
		margin-bottom: 1rem;
		text-align: center;
	}

	.questions-container {
		margin: 3rem auto;
	}

	.question-step {
		display: none;
		animation: fadeIn 0.3s ease;
	}

	.question-step.active {
		display: block;
	}

	.progress-bar {
		height: 4px;
		background: rgba(255, 255, 255, 0.1);
		margin-bottom: 2rem;
		border-radius: 2px;
	}

	.progress {
		height: 100%;
		background: var(--accent);
		border-radius: 2px;
		transition: width 0.3s ease;
	}

	h3 {
		font-size: 1.5rem;
		margin-bottom: 2rem;
		text-align: center;
	}

	.options-grid {
		display: grid;
		gap: 1rem;
		margin: 2rem 0;
	}

	.option-card {
		position: relative;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 0.5rem;
		padding: 1.5rem;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.option-card:hover {
		background: rgba(255, 255, 255, 0.1);
	}

	.option-card input {
		position: absolute;
		opacity: 0;
	}

	.option-card input:checked + .option-content {
		border: 2px solid var(--accent);
		background: rgba(76, 214, 192, 0.1);
	}

	.option-content {
		border: 2px solid transparent;
		border-radius: 0.4rem;
		padding: 1rem;
	}

	.option-content h4 {
		margin: 0 0 0.5rem 0;
		font-size: 1.1rem;
	}

	.option-content p {
		margin: 0;
		font-size: 0.9rem;
		opacity: 0.8;
	}

	.form-grid {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.form-group {
		text-align: left;
	}

	.form-group.full-width {
		grid-column: 1 / -1;
	}

	label {
		display: block;
		margin-bottom: 0.5rem;
		font-size: 0.9rem;
	}

	input, textarea {
		width: 100%;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 0.25rem;
		padding: 0.8rem;
		color: var(--text-light);
	}

	.navigation-buttons {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-top: 2rem;
	}

	.back-btn, .continue-btn {
		padding: 0.8rem 2rem;
		border-radius: 0.25rem;
		font-weight: 600;
		cursor: pointer;
		transition: opacity 0.3s ease;
	}

	.back-btn {
		background: transparent;
		border: 1px solid var(--accent);
		color: var(--accent);
	}

	.continue-btn {
		background: var(--accent);
		color: var(--bg-dark);
		border: none;
	}

	.back-btn:hover, .continue-btn:hover {
		opacity: 0.9;
	}

	@keyframes fadeIn {
		from { opacity: 0; transform: translateY(10px); }
		to { opacity: 1; transform: translateY(0); }
	}

	@media (max-width: 768px) {
		.form-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
	let currentStep = 1;
	const totalSteps = document.querySelectorAll('.question-step').length;
	const answers = {};

	function updateStep() {
		document.querySelectorAll('.question-step').forEach(step => {
			step.classList.remove('active');
		});

		document.querySelector(`[data-step="${currentStep}"]`).classList.add('active');

		const backBtn = document.querySelector('#backBtn');
		const nextBtn = document.querySelector('#nextBtn');

		backBtn.style.display = currentStep === 1 ? 'none' : 'block';
		nextBtn.textContent = currentStep === totalSteps ? 'Enviar' : 'Continuar';
	}

	function validateStep() {
		const currentQuestion = document.querySelector(`[data-step="${currentStep}"]`);
		const inputs = currentQuestion.querySelectorAll('input:checked');
		
		if (currentStep === totalSteps) {
			const requiredInputs = currentQuestion.querySelectorAll('input[required]');
			return Array.from(requiredInputs).every(input => input.value.trim() !== '');
		}

		return inputs.length > 0;
	}

	document.querySelector('#backBtn').addEventListener('click', () => {
		if (currentStep > 1) {
			currentStep--;
			updateStep();
		}
	});

	document.querySelector('#nextBtn').addEventListener('click', () => {
		if (!validateStep()) {
			alert('Por favor, selecciona al menos una opción para continuar');
			return;
		}

		if (currentStep < totalSteps) {
			currentStep++;
			updateStep();
		} else {
			// Recopilar todas las respuestas
			document.querySelectorAll('.question-step').forEach(step => {
				const questionId = step.id.replace('question-', '');
				if (questionId !== 'contact-form') {
					const selectedInputs = step.querySelectorAll('input:checked');
					answers[questionId] = Array.from(selectedInputs).map(input => input.value);
				}
			});

			// Aquí iría la lógica para enviar el formulario
			console.log('Respuestas:', answers);
			console.log('Formulario enviado');
		}
	});

	// Inicializar
	updateStep();
</script>